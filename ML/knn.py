# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_K-NN.ipynb.

# %% auto 0
__all__ = ['iris', 'df', 'df0', 'df1', 'df2', 'X', 'y', 'X_train', 'X_test', 'y_train', 'y_test', 'knn', 'y_pred', 'cm',
           'sayhello']

# %% ../nbs/01_K-NN.ipynb 2
def sayhello(name): return f'Hello {name}'

# %% ../nbs/01_K-NN.ipynb 3
import pandas as pd
from sklearn.datasets import load_iris

# %% ../nbs/01_K-NN.ipynb 4
iris = load_iris()

# %% ../nbs/01_K-NN.ipynb 5
iris.feature_names

# %% ../nbs/01_K-NN.ipynb 6
iris.target_names

# %% ../nbs/01_K-NN.ipynb 7
iris.target

# %% ../nbs/01_K-NN.ipynb 8
df = pd.DataFrame(iris.data,columns=iris.feature_names)
df.head()

# %% ../nbs/01_K-NN.ipynb 9
df['target'] = iris.target
df.head()

# %% ../nbs/01_K-NN.ipynb 10
df[df.target==1].head()

# %% ../nbs/01_K-NN.ipynb 11
df[df.target==2].head()

# %% ../nbs/01_K-NN.ipynb 12
df['flower_name'] =df.target.apply(lambda x: iris.target_names[x])
df.head()

# %% ../nbs/01_K-NN.ipynb 13
df0 = df[:50]
df1 = df[50:100]
df2 = df[100:]

# %% ../nbs/01_K-NN.ipynb 14
import matplotlib.pyplot as plt

# %% ../nbs/01_K-NN.ipynb 15
plt.xlabel('Sepal Length')
plt.ylabel('Sepal Width')
plt.scatter(df0['sepal length (cm)'],
            df0['sepal width (cm)'],
            color="green",marker='+')

plt.scatter(df1['sepal length (cm)'],
            df1['sepal width (cm)'],
            color="blue",marker='.')

plt.scatter(df2['sepal length (cm)'],
            df2['sepal width (cm)'],
            color="red",marker='*')

# %% ../nbs/01_K-NN.ipynb 16
plt.xlabel('Petal Length')
plt.ylabel('Petal Width')
plt.scatter(df0['petal length (cm)'],
            df0['petal width (cm)'],
            color="green",marker='+')

plt.scatter(df1['petal length (cm)'],
            df1['petal width (cm)'],
            color="blue",marker='.')

plt.scatter(df2['sepal length (cm)'],
            df2['sepal width (cm)'],
            color="red",marker='*')

# %% ../nbs/01_K-NN.ipynb 17
from sklearn.model_selection import train_test_split

# %% ../nbs/01_K-NN.ipynb 18
X = df.drop(['target','flower_name'], axis='columns')
y = df.target

# %% ../nbs/01_K-NN.ipynb 19
X_train, X_test, y_train, y_test = train_test_split(X,y,
                                                    test_size=0.2,
                                                    random_state=1)

# %% ../nbs/01_K-NN.ipynb 20
len(X_train)

# %% ../nbs/01_K-NN.ipynb 21
len(X_test)

# %% ../nbs/01_K-NN.ipynb 22
from sklearn.neighbors import KNeighborsClassifier

# %% ../nbs/01_K-NN.ipynb 23
knn = KNeighborsClassifier(n_neighbors=10)
knn.fit(X_train, y_train)

# %% ../nbs/01_K-NN.ipynb 24
knn.score(X_test, y_test)

# %% ../nbs/01_K-NN.ipynb 25
knn.predict([[4.8,3.0,1.5,0.3]])

# %% ../nbs/01_K-NN.ipynb 26
from sklearn.metrics import confusion_matrix

# %% ../nbs/01_K-NN.ipynb 27
y_pred = knn.predict(X_test)
cm = confusion_matrix(y_test, y_pred)
cm

# %% ../nbs/01_K-NN.ipynb 28
import matplotlib.pyplot as plt
import seaborn as sn

# %% ../nbs/01_K-NN.ipynb 29
plt.figure(figsize=(7,5))
sn.heatmap(cm, annot=True)
plt.xlabel('Predicted')
plt.ylabel('Truth')

# %% ../nbs/01_K-NN.ipynb 30
from sklearn.metrics import classification_report

# %% ../nbs/01_K-NN.ipynb 31
print(classification_report(y_test, y_pred))
